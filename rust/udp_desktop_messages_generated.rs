// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use crate::pod_state_generated::*;
use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum UdpDesktopMessageOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct UdpDesktopMessage<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for UdpDesktopMessage<'a> {
  type Inner = UdpDesktopMessage<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> UdpDesktopMessage<'a> {
  pub const VT_REQUESTED_STATE: flatbuffers::VOffsetT = 4;
  pub const VT_MOST_RECENT_TIMESTAMP: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    UdpDesktopMessage { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args UdpDesktopMessageArgs
  ) -> flatbuffers::WIPOffset<UdpDesktopMessage<'bldr>> {
    let mut builder = UdpDesktopMessageBuilder::new(_fbb);
    builder.add_most_recent_timestamp(args.most_recent_timestamp);
    builder.add_requested_state(args.requested_state);
    builder.finish()
  }


  #[inline]
  pub fn requested_state(&self) -> PodState {
    self._tab.get::<PodState>(UdpDesktopMessage::VT_REQUESTED_STATE, Some(PodState::Resting)).unwrap()
  }
  #[inline]
  pub fn most_recent_timestamp(&self) -> i64 {
    self._tab.get::<i64>(UdpDesktopMessage::VT_MOST_RECENT_TIMESTAMP, Some(0)).unwrap()
  }
}

impl flatbuffers::Verifiable for UdpDesktopMessage<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<PodState>("requested_state", Self::VT_REQUESTED_STATE, false)?
     .visit_field::<i64>("most_recent_timestamp", Self::VT_MOST_RECENT_TIMESTAMP, false)?
     .finish();
    Ok(())
  }
}
pub struct UdpDesktopMessageArgs {
    pub requested_state: PodState,
    pub most_recent_timestamp: i64,
}
impl<'a> Default for UdpDesktopMessageArgs {
  #[inline]
  fn default() -> Self {
    UdpDesktopMessageArgs {
      requested_state: PodState::Resting,
      most_recent_timestamp: 0,
    }
  }
}

pub struct UdpDesktopMessageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> UdpDesktopMessageBuilder<'a, 'b> {
  #[inline]
  pub fn add_requested_state(&mut self, requested_state: PodState) {
    self.fbb_.push_slot::<PodState>(UdpDesktopMessage::VT_REQUESTED_STATE, requested_state, PodState::Resting);
  }
  #[inline]
  pub fn add_most_recent_timestamp(&mut self, most_recent_timestamp: i64) {
    self.fbb_.push_slot::<i64>(UdpDesktopMessage::VT_MOST_RECENT_TIMESTAMP, most_recent_timestamp, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> UdpDesktopMessageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    UdpDesktopMessageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<UdpDesktopMessage<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for UdpDesktopMessage<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("UdpDesktopMessage");
      ds.field("requested_state", &self.requested_state());
      ds.field("most_recent_timestamp", &self.most_recent_timestamp());
      ds.finish()
  }
}
#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_udp_desktop_message<'a>(buf: &'a [u8]) -> UdpDesktopMessage<'a> {
  unsafe { flatbuffers::root_unchecked::<UdpDesktopMessage<'a>>(buf) }
}

#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_udp_desktop_message<'a>(buf: &'a [u8]) -> UdpDesktopMessage<'a> {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<UdpDesktopMessage<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `UdpDesktopMessage`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_udp_desktop_message_unchecked`.
pub fn root_as_udp_desktop_message(buf: &[u8]) -> Result<UdpDesktopMessage, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<UdpDesktopMessage>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `UdpDesktopMessage` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_udp_desktop_message_unchecked`.
pub fn size_prefixed_root_as_udp_desktop_message(buf: &[u8]) -> Result<UdpDesktopMessage, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<UdpDesktopMessage>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `UdpDesktopMessage` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_udp_desktop_message_unchecked`.
pub fn root_as_udp_desktop_message_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<UdpDesktopMessage<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<UdpDesktopMessage<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `UdpDesktopMessage` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_udp_desktop_message_unchecked`.
pub fn size_prefixed_root_as_udp_desktop_message_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<UdpDesktopMessage<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<UdpDesktopMessage<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a UdpDesktopMessage and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `UdpDesktopMessage`.
pub unsafe fn root_as_udp_desktop_message_unchecked(buf: &[u8]) -> UdpDesktopMessage {
  flatbuffers::root_unchecked::<UdpDesktopMessage>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed UdpDesktopMessage and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `UdpDesktopMessage`.
pub unsafe fn size_prefixed_root_as_udp_desktop_message_unchecked(buf: &[u8]) -> UdpDesktopMessage {
  flatbuffers::size_prefixed_root_unchecked::<UdpDesktopMessage>(buf)
}
#[inline]
pub fn finish_udp_desktop_message_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<UdpDesktopMessage<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_udp_desktop_message_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<UdpDesktopMessage<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
