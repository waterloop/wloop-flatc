// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(unused_imports, dead_code)]
pub mod wloop {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

#[allow(non_camel_case_types)]
#[repr(u8)]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum PodState {
  Resting = 0,
  LowVoltage = 1,
  Armed = 2,
  AutoPilot = 3,
  Braking = 4,
  EmergencyBrake = 5,
  SystemFailure = 6,
  ManualOperationWaiting = 7,
  Accelerating = 8,
  AtSpeed = 9,
  Decelerating = 10,
  Invalid = 11,

}

pub const ENUM_MIN_POD_STATE: u8 = 0;
pub const ENUM_MAX_POD_STATE: u8 = 11;

impl<'a> flatbuffers::Follow<'a> for PodState {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::read_scalar_at::<Self>(buf, loc)
  }
}

impl flatbuffers::EndianScalar for PodState {
  #[inline]
  fn to_little_endian(self) -> Self {
    let n = u8::to_le(self as u8);
    let p = &n as *const u8 as *const PodState;
    unsafe { *p }
  }
  #[inline]
  fn from_little_endian(self) -> Self {
    let n = u8::from_le(self as u8);
    let p = &n as *const u8 as *const PodState;
    unsafe { *p }
  }
}

impl flatbuffers::Push for PodState {
    type Output = PodState;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        flatbuffers::emplace_scalar::<PodState>(dst, *self);
    }
}

#[allow(non_camel_case_types)]
pub const ENUM_VALUES_POD_STATE:[PodState; 12] = [
  PodState::Resting,
  PodState::LowVoltage,
  PodState::Armed,
  PodState::AutoPilot,
  PodState::Braking,
  PodState::EmergencyBrake,
  PodState::SystemFailure,
  PodState::ManualOperationWaiting,
  PodState::Accelerating,
  PodState::AtSpeed,
  PodState::Decelerating,
  PodState::Invalid
];

#[allow(non_camel_case_types)]
pub const ENUM_NAMES_POD_STATE:[&'static str; 12] = [
    "Resting",
    "LowVoltage",
    "Armed",
    "AutoPilot",
    "Braking",
    "EmergencyBrake",
    "SystemFailure",
    "ManualOperationWaiting",
    "Accelerating",
    "AtSpeed",
    "Decelerating",
    "Invalid"
];

pub fn enum_name_pod_state(e: PodState) -> &'static str {
  let index = e as u8;
  ENUM_NAMES_POD_STATE[index as usize]
}

}  // pub mod Wloop

