// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_POD_STATE: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_POD_STATE: u8 = 11;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_POD_STATE: [PodState; 12] = [
  PodState::Resting,
  PodState::LowVoltage,
  PodState::Armed,
  PodState::AutoPilot,
  PodState::Braking,
  PodState::EmergencyBrake,
  PodState::SystemFailure,
  PodState::ManualOperationWaiting,
  PodState::Accelerating,
  PodState::AtSpeed,
  PodState::Decelerating,
  PodState::Invalid,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct PodState(pub u8);
#[allow(non_upper_case_globals)]
impl PodState {
  pub const Resting: Self = Self(0);
  pub const LowVoltage: Self = Self(1);
  pub const Armed: Self = Self(2);
  pub const AutoPilot: Self = Self(3);
  pub const Braking: Self = Self(4);
  pub const EmergencyBrake: Self = Self(5);
  pub const SystemFailure: Self = Self(6);
  pub const ManualOperationWaiting: Self = Self(7);
  pub const Accelerating: Self = Self(8);
  pub const AtSpeed: Self = Self(9);
  pub const Decelerating: Self = Self(10);
  pub const Invalid: Self = Self(11);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 11;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Resting,
    Self::LowVoltage,
    Self::Armed,
    Self::AutoPilot,
    Self::Braking,
    Self::EmergencyBrake,
    Self::SystemFailure,
    Self::ManualOperationWaiting,
    Self::Accelerating,
    Self::AtSpeed,
    Self::Decelerating,
    Self::Invalid,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Resting => Some("Resting"),
      Self::LowVoltage => Some("LowVoltage"),
      Self::Armed => Some("Armed"),
      Self::AutoPilot => Some("AutoPilot"),
      Self::Braking => Some("Braking"),
      Self::EmergencyBrake => Some("EmergencyBrake"),
      Self::SystemFailure => Some("SystemFailure"),
      Self::ManualOperationWaiting => Some("ManualOperationWaiting"),
      Self::Accelerating => Some("Accelerating"),
      Self::AtSpeed => Some("AtSpeed"),
      Self::Decelerating => Some("Decelerating"),
      Self::Invalid => Some("Invalid"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for PodState {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for PodState {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = unsafe {
      flatbuffers::read_scalar_at::<u8>(buf, loc)
    };
    Self(b)
  }
}

impl flatbuffers::Push for PodState {
    type Output = PodState;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        unsafe { flatbuffers::emplace_scalar::<u8>(dst, self.0); }
    }
}

impl flatbuffers::EndianScalar for PodState {
  #[inline]
  fn to_little_endian(self) -> Self {
    let b = u8::to_le(self.0);
    Self(b)
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(self) -> Self {
    let b = u8::from_le(self.0);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for PodState {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for PodState {}
