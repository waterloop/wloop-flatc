// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use crate::error_types_generated::*;
use crate::pod_data_generated::*;
use crate::pod_state_generated::*;
use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum UdpPodStateMessageOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct UdpPodStateMessage<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for UdpPodStateMessage<'a> {
  type Inner = UdpPodStateMessage<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> UdpPodStateMessage<'a> {
  pub const VT_CURRENT_STATE: flatbuffers::VOffsetT = 4;
  pub const VT_PENDING_NEXT_STATE: flatbuffers::VOffsetT = 6;
  pub const VT_ERRNO: flatbuffers::VOffsetT = 8;
  pub const VT_TELEMETRY: flatbuffers::VOffsetT = 10;
  pub const VT_TELEMETRY_TIMESTAMP: flatbuffers::VOffsetT = 12;
  pub const VT_RECOVERING: flatbuffers::VOffsetT = 14;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    UdpPodStateMessage { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args UdpPodStateMessageArgs<'args>
  ) -> flatbuffers::WIPOffset<UdpPodStateMessage<'bldr>> {
    let mut builder = UdpPodStateMessageBuilder::new(_fbb);
    if let Some(x) = args.telemetry_timestamp { builder.add_telemetry_timestamp(x); }
    if let Some(x) = args.telemetry { builder.add_telemetry(x); }
    builder.add_recovering(args.recovering);
    builder.add_errno(args.errno);
    builder.add_pending_next_state(args.pending_next_state);
    builder.add_current_state(args.current_state);
    builder.finish()
  }


  #[inline]
  pub fn current_state(&self) -> PodState {
    self._tab.get::<PodState>(UdpPodStateMessage::VT_CURRENT_STATE, Some(PodState::Resting)).unwrap()
  }
  #[inline]
  pub fn pending_next_state(&self) -> PodState {
    self._tab.get::<PodState>(UdpPodStateMessage::VT_PENDING_NEXT_STATE, Some(PodState::Resting)).unwrap()
  }
  #[inline]
  pub fn errno(&self) -> UdpErrno {
    self._tab.get::<UdpErrno>(UdpPodStateMessage::VT_ERRNO, Some(UdpErrno::NoError)).unwrap()
  }
  #[inline]
  pub fn telemetry(&self) -> Option<PodData<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<PodData>>(UdpPodStateMessage::VT_TELEMETRY, None)
  }
  #[inline]
  pub fn telemetry_timestamp(&self) -> Option<i64> {
    self._tab.get::<i64>(UdpPodStateMessage::VT_TELEMETRY_TIMESTAMP, None)
  }
  #[inline]
  pub fn recovering(&self) -> bool {
    self._tab.get::<bool>(UdpPodStateMessage::VT_RECOVERING, Some(false)).unwrap()
  }
}

impl flatbuffers::Verifiable for UdpPodStateMessage<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<PodState>("current_state", Self::VT_CURRENT_STATE, false)?
     .visit_field::<PodState>("pending_next_state", Self::VT_PENDING_NEXT_STATE, false)?
     .visit_field::<UdpErrno>("errno", Self::VT_ERRNO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<PodData>>("telemetry", Self::VT_TELEMETRY, false)?
     .visit_field::<i64>("telemetry_timestamp", Self::VT_TELEMETRY_TIMESTAMP, false)?
     .visit_field::<bool>("recovering", Self::VT_RECOVERING, false)?
     .finish();
    Ok(())
  }
}
pub struct UdpPodStateMessageArgs<'a> {
    pub current_state: PodState,
    pub pending_next_state: PodState,
    pub errno: UdpErrno,
    pub telemetry: Option<flatbuffers::WIPOffset<PodData<'a>>>,
    pub telemetry_timestamp: Option<i64>,
    pub recovering: bool,
}
impl<'a> Default for UdpPodStateMessageArgs<'a> {
  #[inline]
  fn default() -> Self {
    UdpPodStateMessageArgs {
      current_state: PodState::Resting,
      pending_next_state: PodState::Resting,
      errno: UdpErrno::NoError,
      telemetry: None,
      telemetry_timestamp: None,
      recovering: false,
    }
  }
}

pub struct UdpPodStateMessageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> UdpPodStateMessageBuilder<'a, 'b> {
  #[inline]
  pub fn add_current_state(&mut self, current_state: PodState) {
    self.fbb_.push_slot::<PodState>(UdpPodStateMessage::VT_CURRENT_STATE, current_state, PodState::Resting);
  }
  #[inline]
  pub fn add_pending_next_state(&mut self, pending_next_state: PodState) {
    self.fbb_.push_slot::<PodState>(UdpPodStateMessage::VT_PENDING_NEXT_STATE, pending_next_state, PodState::Resting);
  }
  #[inline]
  pub fn add_errno(&mut self, errno: UdpErrno) {
    self.fbb_.push_slot::<UdpErrno>(UdpPodStateMessage::VT_ERRNO, errno, UdpErrno::NoError);
  }
  #[inline]
  pub fn add_telemetry(&mut self, telemetry: flatbuffers::WIPOffset<PodData<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<PodData>>(UdpPodStateMessage::VT_TELEMETRY, telemetry);
  }
  #[inline]
  pub fn add_telemetry_timestamp(&mut self, telemetry_timestamp: i64) {
    self.fbb_.push_slot_always::<i64>(UdpPodStateMessage::VT_TELEMETRY_TIMESTAMP, telemetry_timestamp);
  }
  #[inline]
  pub fn add_recovering(&mut self, recovering: bool) {
    self.fbb_.push_slot::<bool>(UdpPodStateMessage::VT_RECOVERING, recovering, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> UdpPodStateMessageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    UdpPodStateMessageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<UdpPodStateMessage<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for UdpPodStateMessage<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("UdpPodStateMessage");
      ds.field("current_state", &self.current_state());
      ds.field("pending_next_state", &self.pending_next_state());
      ds.field("errno", &self.errno());
      ds.field("telemetry", &self.telemetry());
      ds.field("telemetry_timestamp", &self.telemetry_timestamp());
      ds.field("recovering", &self.recovering());
      ds.finish()
  }
}
#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_udp_pod_state_message<'a>(buf: &'a [u8]) -> UdpPodStateMessage<'a> {
  unsafe { flatbuffers::root_unchecked::<UdpPodStateMessage<'a>>(buf) }
}

#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_udp_pod_state_message<'a>(buf: &'a [u8]) -> UdpPodStateMessage<'a> {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<UdpPodStateMessage<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `UdpPodStateMessage`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_udp_pod_state_message_unchecked`.
pub fn root_as_udp_pod_state_message(buf: &[u8]) -> Result<UdpPodStateMessage, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<UdpPodStateMessage>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `UdpPodStateMessage` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_udp_pod_state_message_unchecked`.
pub fn size_prefixed_root_as_udp_pod_state_message(buf: &[u8]) -> Result<UdpPodStateMessage, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<UdpPodStateMessage>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `UdpPodStateMessage` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_udp_pod_state_message_unchecked`.
pub fn root_as_udp_pod_state_message_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<UdpPodStateMessage<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<UdpPodStateMessage<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `UdpPodStateMessage` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_udp_pod_state_message_unchecked`.
pub fn size_prefixed_root_as_udp_pod_state_message_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<UdpPodStateMessage<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<UdpPodStateMessage<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a UdpPodStateMessage and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `UdpPodStateMessage`.
pub unsafe fn root_as_udp_pod_state_message_unchecked(buf: &[u8]) -> UdpPodStateMessage {
  flatbuffers::root_unchecked::<UdpPodStateMessage>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed UdpPodStateMessage and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `UdpPodStateMessage`.
pub unsafe fn size_prefixed_root_as_udp_pod_state_message_unchecked(buf: &[u8]) -> UdpPodStateMessage {
  flatbuffers::size_prefixed_root_unchecked::<UdpPodStateMessage>(buf)
}
#[inline]
pub fn finish_udp_pod_state_message_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<UdpPodStateMessage<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_udp_pod_state_message_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<UdpPodStateMessage<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
