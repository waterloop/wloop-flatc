// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_UDP_ERRNO: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_UDP_ERRNO: u8 = 5;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_UDP_ERRNO: [UdpErrno; 6] = [
  UdpErrno::NoError,
  UdpErrno::InvalidTransitionRequest,
  UdpErrno::ArmingFault,
  UdpErrno::ControllerTimeout,
  UdpErrno::GeneralPodFailure,
  UdpErrno::UnknownError,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct UdpErrno(pub u8);
#[allow(non_upper_case_globals)]
impl UdpErrno {
  pub const NoError: Self = Self(0);
  pub const InvalidTransitionRequest: Self = Self(1);
  pub const ArmingFault: Self = Self(2);
  pub const ControllerTimeout: Self = Self(3);
  pub const GeneralPodFailure: Self = Self(4);
  pub const UnknownError: Self = Self(5);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 5;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NoError,
    Self::InvalidTransitionRequest,
    Self::ArmingFault,
    Self::ControllerTimeout,
    Self::GeneralPodFailure,
    Self::UnknownError,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NoError => Some("NoError"),
      Self::InvalidTransitionRequest => Some("InvalidTransitionRequest"),
      Self::ArmingFault => Some("ArmingFault"),
      Self::ControllerTimeout => Some("ControllerTimeout"),
      Self::GeneralPodFailure => Some("GeneralPodFailure"),
      Self::UnknownError => Some("UnknownError"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for UdpErrno {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for UdpErrno {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = unsafe {
      flatbuffers::read_scalar_at::<u8>(buf, loc)
    };
    Self(b)
  }
}

impl flatbuffers::Push for UdpErrno {
    type Output = UdpErrno;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        unsafe { flatbuffers::emplace_scalar::<u8>(dst, self.0); }
    }
}

impl flatbuffers::EndianScalar for UdpErrno {
  #[inline]
  fn to_little_endian(self) -> Self {
    let b = u8::to_le(self.0);
    Self(b)
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(self) -> Self {
    let b = u8::from_le(self.0);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for UdpErrno {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for UdpErrno {}
